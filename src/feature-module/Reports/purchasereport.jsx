import React, { useState, useEffect } from "react";
// import Breadcrumbs from "../../core/breadcrumbs"; 
// import { Link } from "react-router-dom";
import { fetchXReport } from "../Api/TransactionApi";
import { Printer, RefreshCw } from "react-feather";
import { Tabs, Tab } from "react-bootstrap";

const PurchaseReport = () => {
  const [latestReport, setLatestReport] = useState(null);
  const [activeDetailTab, setActiveDetailTab] = useState("summary");
  
  const fetchReportData = async () => {
    try {
      const response = await fetchXReport();
      if (response.success && response.data && response.data.responseDto) {
        console.log('X Report Data:', response.data.responseDto);
        const transformedData = {
          reportGeneratedBy: response.data.responseDto.reportGeneratedBy,
          reportType: "X Report",
          startDate: response.data.responseDto.startDate,
          endDate: response.data.responseDto.endDate,
          fullyTotalSales: response.data.responseDto.totalSales,
          salesDateDetails: [{
            salesDate: response.data.responseDto.startDate,
            totalTransactions: response.data.responseDto.totalTransactions,
            totalSales: response.data.responseDto.totalSales,
            categoryTotals: Object.entries(response.data.responseDto.categoryTotals).map(([categoryName, categoryTotal]) => ({
              categoryName,
              categoryTotal
            })),
            overallPaymentTotals: Object.entries(response.data.responseDto.overallPaymentTotals).map(([paymentMethod, paymentTotal]) => ({
              paymentMethod,
              paymentTotal
            })),
            userPaymentDetails: response.data.responseDto.userPaymentDetails.map(user => 
              Object.entries(user.payments).map(([paymentMethod, paymentTotal]) => ({
                userName: user.userName,
                paymentMethod,
                paymentTotal
              }))
            ).flat()
          }]
        };
        
        setLatestReport(transformedData);
      } else {
        console.error("Failed to fetch X-Report:", response.error);
      }
    } catch (error) {
      console.error("Error fetching X-Report:", error);
    }
  };
  
  useEffect(() => {
    fetchReportData();
  }, []);

  const formatCurrency = (value) => {
    return parseFloat(value).toFixed(2);
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString();
  };

  const printReport = () => {
    if (!latestReport) return;

    const printWindow = window.open('', '_blank', 'height=600,width=800');
    
    printWindow.document.write(`
      <html>
        <head>
          <title>X Report - ${latestReport.reportGeneratedBy}</title>
          <style>
            body {
              font-family: Arial, sans-serif;
              padding: 20px;
              color: #333;
            }
            h1, h2, h3, h4, h5 {
              margin-top: 15px;
              margin-bottom: 10px;
              color: #212529;
            }
            .report-header {
              margin-bottom: 20px;
              padding-bottom: 15px;
              border-bottom: 2px solid #dee2e6;
            }
            table {
              width: 100%;
              border-collapse: collapse;
              margin-bottom: 20px;
            }
            th, td {
              padding: 10px;
              border: 1px solid #dee2e6;
              text-align: left;
            }
            th {
              background-color: #f8f9fa;
              font-weight: bold;
            }
            .section {
              margin-bottom: 30px;
              page-break-inside: avoid;
            }
            .date-section {
              margin-top: 30px;
              page-break-before: always;
            }
            .date-section:first-of-type {
              page-break-before: avoid;
            }
            .report-info {
              display: flex;
              justify-content: space-between;
            }
            .report-info div {
              flex: 1;
            }
            @page {
              size: portrait;
              margin: 1cm;
            }
            @media print {
              body {
                padding: 0;
                margin: 0;
              }
            }
          </style>
        </head>
        <body>
          <div class="report-header">
            <h1>X Report</h1>
            <div class="report-info">
              <div>
                <p><strong>Generated By:</strong> ${latestReport.reportGeneratedBy}</p>
                <p><strong>Report Type:</strong> ${latestReport.reportType}</p>
              </div>
              <div>
                <p><strong>Period:</strong> ${formatDate(latestReport.startDate)} - ${formatDate(latestReport.endDate)}</p>
                <p><strong>Total Sales:</strong> ${formatCurrency(latestReport.fullyTotalSales)}</p>
              </div>
            </div>
          </div>
          
          <div class="section">
            <h2>Daily Sales Summary</h2>
            <table>
              <thead>
                <tr>
                  <th>Date</th>
                  <th>Transactions</th>
                  <th>Total Sales</th>
                </tr>
              </thead>
              <tbody>
                ${latestReport.salesDateDetails.map(detail => `
                  <tr>
                    <td>${formatDate(detail.salesDate)}</td>
                    <td>${detail.totalTransactions}</td>
                    <td>${formatCurrency(detail.totalSales)}</td>
                  </tr>
                `).join('')}
              </tbody>
            </table>
          </div>
          
          ${latestReport.salesDateDetails.map(dateDetail => `
            <div class="date-section">
              <h2>Details for ${formatDate(dateDetail.salesDate)}</h2>
              
              <div class="section">
                <h3>Categories</h3>
                <table>
                  <thead>
                    <tr>
                      <th>Category</th>
                      <th>Amount</th>
                    </tr>
                  </thead>
                  <tbody>
                    ${dateDetail.categoryTotals && dateDetail.categoryTotals.map(category => `
                      <tr>
                        <td>${category.categoryName}</td>
                        <td>${formatCurrency(category.categoryTotal)}</td>
                      </tr>
                    `).join('') || '<tr><td colspan="2">No category data available</td></tr>'}
                  </tbody>
                </table>
              </div>
              
              <div class="section">
                <h3>Payment Methods</h3>
                <table>
                  <thead>
                    <tr>
                      <th>Payment Method</th>
                      <th>Amount</th>
                    </tr>
                  </thead>
                  <tbody>
                    ${dateDetail.overallPaymentTotals && dateDetail.overallPaymentTotals.map(payment => `
                      <tr>
                        <td>${payment.paymentMethod}</td>
                        <td>${formatCurrency(payment.paymentTotal)}</td>
                      </tr>
                    `).join('') || '<tr><td colspan="2">No payment data available</td></tr>'}
                  </tbody>
                </table>
              </div>
              
              <div class="section">
                <h3>User Payment Details</h3>
                <table>
                  <thead>
                    <tr>
                      <th>User</th>
                      <th>Payment Method</th>
                      <th>Amount</th>
                    </tr>
                  </thead>
                  <tbody>
                    ${dateDetail.userPaymentDetails && dateDetail.userPaymentDetails.map(userPayment => `
                      <tr>
                        <td>${userPayment.userName}</td>
                        <td>${userPayment.paymentMethod}</td>
                        <td>${formatCurrency(userPayment.paymentTotal)}</td>
                      </tr>
                    `).join('') || '<tr><td colspan="3">No user payment data available</td></tr>'}
                  </tbody>
                </table>
              </div>
            </div>
          `).join('')}
        </body>
      </html>
    `);

    printWindow.document.close();
    printWindow.focus();
    
    setTimeout(() => {
      printWindow.print();
    }, 500);
  };

  return (
    <div className="pos-category-grid-container">
      <div className="page-wrapper">
        <div className="content">   
          <div className="card">
            <div className="card-body">
              <div className="report-details">
                <div className="d-flex justify-content-between align-items-center mb-4">
                  <h4 className="card-title mb-0 text-primary">X Report Details</h4>
                  <div className="d-flex">
                    <button 
                      className="btn btn-secondary d-flex align-items-center me-2"
                      onClick={fetchReportData}
                    >
                      <RefreshCw className="me-1" size={16} />
                    </button>
                    <button 
                      className="btn btn-primary d-flex align-items-center"
                      onClick={printReport}
                      disabled={!latestReport}
                    >
                      <Printer className="me-1" size={16} />
                    </button>
                  </div>
                </div>
                
                {latestReport && (
                  <>
                    <div className="report-header mb-4 p-3 bg-light rounded">
                      <div className="row">
                        <div className="col-md-6">
                          <h5 className="text-dark">Report Information</h5>
                          <p className="mb-1"><strong className="text-secondary">Generated By:</strong> <span className="text-dark">{latestReport.reportGeneratedBy}</span></p>
                          <p className="mb-1"><strong className="text-secondary">Report Type:</strong> <span className="text-dark">{latestReport.reportType}</span></p>
                        </div>
                        <div className="col-md-6">
                          <h5 className="text-dark">Report Period</h5>
                          <p className="mb-1"><strong className="text-secondary">From:</strong> <span className="text-dark">{formatDate(latestReport.startDate)}</span></p>
                          <p className="mb-1"><strong className="text-secondary">To:</strong> <span className="text-dark">{formatDate(latestReport.endDate)}</span></p>
                          <p className="mb-1"><strong className="text-secondary">Total Sales:</strong> <span className="text-success">{formatCurrency(latestReport.fullyTotalSales)}</span></p>
                        </div>
                      </div>
                    </div>

                    <Tabs
                      activeKey={activeDetailTab}
                      onSelect={(k) => setActiveDetailTab(k)}
                      className="mb-4"
                    >
                      <Tab eventKey="summary" title="Daily Summary">
                        {latestReport.salesDateDetails && latestReport.salesDateDetails.length > 0 && (
                          <div className="table-responsive mt-3">
                            <table className="table table-bordered table-striped">
                              <thead className="thead-light bg-primary text-white">
                                <tr>
                                  <th>Date</th>
                                  <th>Transactions</th>
                                  <th>Total Sales</th>
                                </tr>
                              </thead>
                              <tbody>
                                {latestReport.salesDateDetails.map((detail, index) => (
                                  <tr key={index}>
                                    <td className="text-dark">{formatDate(detail.salesDate)}</td>
                                    <td className="text-dark">{detail.totalTransactions}</td>
                                    <td className="text-success">{formatCurrency(detail.totalSales)}</td>
                                  </tr>
                                ))}
                              </tbody>
                            </table>
                          </div>
                        )}
                      </Tab>
                      <Tab eventKey="categories" title="Categories Breakdown">
                        {latestReport.salesDateDetails && latestReport.salesDateDetails.length > 0 && (
                          <div className="mt-3">
                            {latestReport.salesDateDetails.map((dateDetail, dateIndex) => (
                              <div key={dateIndex} className="mb-4">
                                <h5 className="border-bottom pb-2 text-primary">{formatDate(dateDetail.salesDate)} - Categories</h5>
                                {dateDetail.categoryTotals && dateDetail.categoryTotals.length > 0 ? (
                                  <div className="table-responsive">
                                    <table className="table table-bordered">
                                      <thead className="thead-light bg-primary text-white">
                                        <tr>
                                          <th>Category</th>
                                          <th>Amount</th>
                                        </tr>
                                      </thead>
                                      <tbody>
                                        {dateDetail.categoryTotals.map((category, catIndex) => (
                                          <tr key={catIndex}>
                                            <td className="text-dark">{category.categoryName}</td>
                                            <td className="text-success">{formatCurrency(category.categoryTotal)}</td>
                                          </tr>
                                        ))}
                                      </tbody>
                                    </table>
                                  </div>
                                ) : (
                                  <p className="text-muted">No category data available for this date</p>
                                )}
                              </div>
                            ))}
                          </div>
                        )}
                      </Tab>
                      <Tab eventKey="payments" title="Payment Methods">
                        {latestReport.salesDateDetails && latestReport.salesDateDetails.length > 0 && (
                          <div className="mt-3">
                            {latestReport.salesDateDetails.map((dateDetail, dateIndex) => (
                              <div key={dateIndex} className="mb-4">
                                <h5 className="border-bottom pb-2 text-primary">{formatDate(dateDetail.salesDate)} - Payment Methods</h5>
                                {dateDetail.overallPaymentTotals && dateDetail.overallPaymentTotals.length > 0 ? (
                                  <div className="table-responsive">
                                    <table className="table table-bordered">
                                      <thead className="thead-light bg-primary text-white">
                                        <tr>
                                          <th>Payment Method</th>
                                          <th>Amount</th>
                                        </tr>
                                      </thead>
                                      <tbody>
                                        {dateDetail.overallPaymentTotals.map((payment, payIndex) => (
                                          <tr key={payIndex}>
                                            <td className="text-dark">{payment.paymentMethod}</td>
                                            <td className="text-success">{formatCurrency(payment.paymentTotal)}</td>
                                          </tr>
                                        ))}
                                      </tbody>
                                    </table>
                                  </div>
                                ) : (
                                  <p className="text-muted">No payment data available for this date</p>
                                )}
                              </div>
                            ))}
                          </div>
                        )}
                      </Tab>
                      <Tab eventKey="users" title="User Payment Details">
                        {latestReport.salesDateDetails && latestReport.salesDateDetails.length > 0 && (
                          <div className="mt-3">
                            {latestReport.salesDateDetails.map((dateDetail, dateIndex) => (
                              <div key={dateIndex} className="mb-4">
                                <h5 className="border-bottom pb-2 text-primary">{formatDate(dateDetail.salesDate)} - User Payments</h5>
                                {dateDetail.userPaymentDetails && dateDetail.userPaymentDetails.length > 0 ? (
                                  <div className="table-responsive">
                                    <table className="table table-bordered">
                                      <thead className="thead-light bg-primary text-white">
                                        <tr>
                                          <th>User</th>
                                          <th>Payment Method</th>
                                          <th>Amount</th>
                                        </tr>
                                      </thead>
                                      <tbody>
                                        {dateDetail.userPaymentDetails.map((userPayment, userIndex) => (
                                          <tr key={userIndex}>
                                            <td className="text-dark">{userPayment.userName}</td>
                                            <td className="text-dark">{userPayment.paymentMethod}</td>
                                            <td className="text-success">{formatCurrency(userPayment.paymentTotal)}</td>
                                          </tr>
                                        ))}
                                      </tbody>
                                    </table>
                                  </div>
                                ) : (
                                  <p className="text-muted">No user payment data available for this date</p>
                                )}
                              </div>
                            ))}
                          </div>
                        )}
                      </Tab>
                    </Tabs>
                  </>
                )}
                
                {!latestReport && (
                  <div className="alert alert-info mt-3">
                    <p className="mb-0">No report data available yet.</p>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PurchaseReport;
